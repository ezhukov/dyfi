Description: Remove embedded encode_base64 function and pidfile writing

--- a/dyfi-update.pl
+++ b/dyfi-update.pl
@@ -92,6 +92,7 @@
 use Socket;
 use strict;
 use Fcntl qw(:flock);
+use LWP::UserAgent;
 
 my ($debug, $log, $pidfile, $cfgfile,
 	$update_host, $update_uri, $update_port,
@@ -189,11 +190,11 @@
 	exit 1;
 }
 
-if (!$pidfile) {
-	print "No pid file specified - it is mandatory.\nExample: /var/run/dyfi-update.pid\n";
-	print $helpstr;
-	exit 1;
-}
+#if (!$pidfile) {
+#	print "No pid file specified - it is mandatory.\nExample: /var/run/dyfi-update.pid\n";
+#	print $helpstr;
+#	exit 1;
+#}
 
 #
 #	read & parse config file
@@ -258,23 +259,6 @@
 }
 
 #
-#	Base64 encoding code from MIME::Base64
-#	which is Copyright 1995-1999, 2001 Gisle Aas.
-#
-sub encode_base64 ($) {
-	my $res = "";
-	pos($_[0]) = 0;                          # ensure start at the beginning
-	
-	$res = join '', map( pack('u',$_)=~ /^.(\S*)/, ($_[0]=~/(.{1,45})/gs));
-	
-	$res =~ tr|` -_|AA-Za-z0-9+/|;               # # help emacs
-	# fix padding at the end
-	my $padding = (3 - length($_[0]) % 3) % 3;
-	$res =~ s/.{$padding}$/'=' x $padding/e if $padding;
-	return $res;
-}
-
-#
 #	cleanup whitespace
 #
 
@@ -299,6 +283,14 @@
 #	TODO: add timeout support!
 #
 
+sub https_get {
+  my($ht_uri, $ht_user, $ht_passwd) = @_;
+  my $ua = LWP::UserAgent->new;
+  $ua->credentials("www.dy.fi:443", "dy.fi update", $ht_user, $ht_passwd);
+  my $page = $ua->get("https://www.dy.fi/$ht_uri");
+  return ($page->code, $page->content);
+}
+
 sub htget {
 	my($ht_host, $ht_port, $ht_uri, $ht_user, $ht_passwd) = @_;
 	
@@ -450,7 +442,7 @@
 
 sub checkip {
 	my ($rcode, $rtext, $data, %headers) = htget($checkip_host, $checkip_port, $checkip_uri);
-	
+
 	if ($data =~ /ip\s+address:\s+(\d+\.\d+\.\d+\.\d+)/i) {
 		return $1;
 	} else {
@@ -489,9 +481,12 @@
 
 sub update {
 	my $uri = $update_uri . "?hostname=" . join(',', @hosts);
-	my ($rcode, $rtext, $data, %headers) = htget($update_host, $update_port, $uri, $username, $password);
+#	my ($rcode, $rtext, $data, %headers) = htget($update_host, $update_port, $uri, $username, $password);
 	
-	if ($rcode ne 200 || lc($headers{'content-type'}) !~ /^text\/plain/ || !$data) {
+#	if ($rcode ne 200 || lc($headers{'content-type'}) !~ /^text\/plain/ || !$data) {
+	my ($rcode, $data) = https_get($uri, $username, $password);
+
+	if ($rcode ne 200 || !$data) {
 		error("hostname update failed!");
 		if ($rcode > 0) {
 			# if this was not a network failure, don't retry quickly
@@ -529,9 +524,13 @@
 
 sub release {
 	my $uri = $update_uri . "?hostname=" . join(',', @hosts) . "&offline=yes";
-	my ($rcode, $rtext, $data, %headers) = htget($update_host, $update_port, $uri, $username, $password);
+	#my ($rcode, $rtext, $data, %headers) = htget($update_host, $update_port, $uri, $username, $password);
 	
-	if ($rcode ne 200 || lc($headers{'content-type'}) !~ /^text\/plain/ || !$data) {
+	#if ($rcode ne 200 || lc($headers{'content-type'}) !~ /^text\/plain/ || !$data) {
+
+	my ($rcode, $data) = https_get($uri, $username, $password);
+
+	if ($rcode ne 200 || !$data) {
 		error("hostname release failed!");
 		if ($rcode > 0) {
 			# if this was not a network failure, don't retry quickly
@@ -562,7 +561,7 @@
 #	main #####
 #
 
-writepid($pidfile);
+#writepid($pidfile);
 
 info("$me $version started up");
 
