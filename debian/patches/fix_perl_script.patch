Description: Use functionalities available in Debian
  * remove embedded encode_base64 function
  * remove pidfile writing
  * remove HTTP GET request implementation
  * add LWP::UserAgent module dependency

--- a/dyfi-update.pl
+++ b/dyfi-update.pl
@@ -5,9 +5,6 @@
 #
 #    A perl client for updating dy.fi hostnames automatically
 #
-#    Only requires perl 5.002 with Socket and strict modules,
-#    HTTP and base64 code has been embedded.
-#
 #    This program is free software; you can redistribute it and/or modify
 #    it under the terms of the GNU General Public License as published by
 #    the Free Software Foundation; either version 2 of the License, or
@@ -88,10 +85,8 @@
 # Thank you!
 #
 
-require 5.002;
-use Socket;
 use strict;
-use Fcntl qw(:flock);
+use LWP::UserAgent;
 
 my ($debug, $log, $pidfile, $cfgfile,
 	$update_host, $update_uri, $update_port,
@@ -123,32 +118,6 @@
 
 my($me) = "dyfi-update.pl";
 my($version) = "v1.2.0";
-my($helpstr) = "$me $version   Usage:
-
-$me -f <configfile>     (recommended)
-
-  OR
-
-$me -u <username> -p <password> -i <pidfile> [-l <logfile>]
-   [-d] hostname1.dy.fi hostname2.dy.fi ...
-
-  If no logfile is specified, log messages are printed on standard output.
-Specify the -d option to produce a very verbose debugging log which
-describes every action taken. 
-
-  Example:
-
-$me -u email\@add.ress.fi -p password
-   -l /var/log/dyfi-update.log -i /var/run/dyfi-update.pid box.dy.fi &
-
-  dyfi-update.pl does not need root privileges run. Of course you need
-to be able to write to the log & pid files, and read the config file.
-The pid file is a mandatory option - the file is used to make sure that
-no more than one copy of the script is run accidentally.
-
-Please remember: dyfi-update.pl is a daemon, not a cron script.
-
-";
 
 #
 #	parse arguments
@@ -168,12 +137,9 @@
 		$cfgfile = shift @ARGV;
 	} elsif ($a eq "-d") {
 		$debug = 1;
-	} elsif ($a eq "-h") {
-		print $helpstr;
-		exit 0;
 	} else {
 		if ($a =~ /^-/) {
-			print $helpstr;
+			crash("Unknown config!");
 			exit 1;
 		}
 		push @hosts, $a;
@@ -185,13 +151,7 @@
 }
 
 if (!$username || !$password || $#hosts < 0) {
-	print $helpstr;
-	exit 1;
-}
-
-if (!$pidfile) {
-	print "No pid file specified - it is mandatory.\nExample: /var/run/dyfi-update.pid\n";
-	print $helpstr;
+	crash("username, password or hosts setting is missing");
 	exit 1;
 }
 
@@ -258,23 +218,6 @@
 }
 
 #
-#	Base64 encoding code from MIME::Base64
-#	which is Copyright 1995-1999, 2001 Gisle Aas.
-#
-sub encode_base64 ($) {
-	my $res = "";
-	pos($_[0]) = 0;                          # ensure start at the beginning
-	
-	$res = join '', map( pack('u',$_)=~ /^.(\S*)/, ($_[0]=~/(.{1,45})/gs));
-	
-	$res =~ tr|` -_|AA-Za-z0-9+/|;               # # help emacs
-	# fix padding at the end
-	my $padding = (3 - length($_[0]) % 3) % 3;
-	$res =~ s/.{$padding}$/'=' x $padding/e if $padding;
-	return $res;
-}
-
-#
 #	cleanup whitespace
 #
 
@@ -285,102 +228,15 @@
 }
 
 #
-#	send to socket
-#
-
-sub ssend {
-	return syswrite(SOCK, $_[0], length($_[0]));
-}
-
-#
-#	a simple and stupid HTTP GET client
-#	included here so that we would not depend on any specific
-#	module being installed.
-#	TODO: add timeout support!
+#	Get request over HTTPS
 #
 
-sub htget {
-	my($ht_host, $ht_port, $ht_uri, $ht_user, $ht_passwd) = @_;
-	
-	my($basicauth) = '';
-	if ($ht_user && $ht_passwd) {
-		$basicauth = sprintf("Authorization: Basic %s\r\n",
-			encode_base64("$ht_user:$ht_passwd"));
-	}
-	
-	debug("HTTP GET request to $ht_host:$ht_port $ht_uri");
-	my($iaddr, $paddr, $proto);
-	if (!($iaddr = inet_aton($ht_host))) {
-		error("Cannot resolve host address for $ht_host: $!");
-		return;
-	}
-	if (!($paddr = sockaddr_in($ht_port, $iaddr))) {
-		error("sockaddr_in() for $ht_host:$ht_port failed: $!");
-		return;
-	}
-	if (!($proto = getprotobyname('tcp'))) {
-		error("getprotobyname(tcp) failed: $!");
-		return;
-	}
-	
-	if (!socket(SOCK, PF_INET, SOCK_STREAM, $proto)) {
-		error("Cannot get socket: $!");
-		return;
-	}
-	
-	if (!connect(SOCK, $paddr)) {
-		error("Cannot connect to $ht_host:$ht_port: $!");
-		return;
-	}
-	
-	my($request)	= "GET $ht_uri HTTP/1.0\r\n"
-			. $basicauth
-			. "User-Agent: $me $version ($$)\r\n"
-			. "Host: $ht_host\r\n"
-			. "Pragma: no-cache\r\n"
-			. "Cache-Control: no-cache\r\n"
-			. "\r\n";
-	
-	if (!ssend($request)) {
-		error("Could not send request to $ht_host:$ht_port: $!");
-		return;
-	}
-	
-	my($state) = 0;
-	my($line, $data) = ("", "");
-	
-	my($proto, $rcode, $rtext, %headers);
-	while ($line = <SOCK>) {
-		if ($state == 0) {
-			# waiting for HTTP response
-			cleanup($line);
-			my @rt;
-			($proto, $rcode, @rt) = split(' ', $line);
-			$rtext = join(' ', @rt);
-			if ($rcode != 200) {
-				error("Request failed, server replied: $rcode $rtext");
-				return ($rcode, $rtext);
-			}
-			$state++;
-		} elsif ($state eq 1) {
-			# reading HTTP headers
-			cleanup($line);
-			if ($line =~ /^([^:]+):\s+(.*)$/) {
-				$headers{lc($1)} = $2;
-			}
-			if ($line eq "") { $state++; }
-		} elsif ($state eq 2) {
-			# reading content
-			$data .= $line;
-		}
-	}
-	
-	if (!close(SOCK)) {
-		error("Closing socket after reading reply failed: $!");
-	}
-	
-	debug("HTTP GET finished successfully");
-	return ($rcode, $rtext, $data, %headers);
+sub https_get {
+  my($ht_uri, $ht_user, $ht_passwd) = @_;
+  my $ua = LWP::UserAgent->new;
+  $ua->credentials("www.dy.fi:443", "dy.fi update", $ht_user, $ht_passwd);
+  my $page = $ua->get("https://www.dy.fi/$ht_uri");
+  return ($page->code, $page->content);
 }
 
 #
@@ -429,29 +285,14 @@
 }
 
 #
-#	write pid file
-#
-
-sub writepid {
-	my($f) = @_;
-	open(PF, ">>$f") || crash("Could not open $f for writing pid: $!");
-	my $ofh = select(PF); $| = 1; select($ofh); # autoflush
-	flock(PF, LOCK_EX|LOCK_NB) || crash("Could not flock pid file (other copy already running?): $!");
-	truncate(PF, 0) || crash("Could not truncate pid file: $!");
-	seek(PF, 0, 0) || crash("Could not seek to beginning of pid file: $!");
-	print PF "$$\n" || crash("Could not write pid to $f: $!");
-}
-
-#
 #	check my current IP address
 #	TODO: add support for simply getting the address of an interface
 #	in case of direct public IP assignment using DHCP/PPP
 #
 
 sub checkip {
-	my ($rcode, $rtext, $data, %headers) = htget($checkip_host, $checkip_port, $checkip_uri);
-	
-	if ($data =~ /ip\s+address:\s+(\d+\.\d+\.\d+\.\d+)/i) {
+	my $response = LWP::UserAgent->new->get("http://$checkip_host");
+	if ($response->content =~ /ip\s+address:\s+(\d+\.\d+\.\d+\.\d+)/i) {
 		return $1;
 	} else {
 		error("Current IP address check failed!");
@@ -489,9 +330,10 @@
 
 sub update {
 	my $uri = $update_uri . "?hostname=" . join(',', @hosts);
-	my ($rcode, $rtext, $data, %headers) = htget($update_host, $update_port, $uri, $username, $password);
-	
-	if ($rcode ne 200 || lc($headers{'content-type'}) !~ /^text\/plain/ || !$data) {
+
+	my ($rcode, $data) = https_get($uri, $username, $password);
+
+	if ($rcode ne 200 || !$data) {
 		error("hostname update failed!");
 		if ($rcode > 0) {
 			# if this was not a network failure, don't retry quickly
@@ -529,9 +371,10 @@
 
 sub release {
 	my $uri = $update_uri . "?hostname=" . join(',', @hosts) . "&offline=yes";
-	my ($rcode, $rtext, $data, %headers) = htget($update_host, $update_port, $uri, $username, $password);
-	
-	if ($rcode ne 200 || lc($headers{'content-type'}) !~ /^text\/plain/ || !$data) {
+
+	my ($rcode, $data) = https_get($uri, $username, $password);
+
+	if ($rcode ne 200 || !$data) {
 		error("hostname release failed!");
 		if ($rcode > 0) {
 			# if this was not a network failure, don't retry quickly
@@ -562,8 +405,6 @@
 #	main #####
 #
 
-writepid($pidfile);
-
 info("$me $version started up");
 
 # catch signals
